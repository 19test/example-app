/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from './toolbar';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/component_factory';
import * as import10 from '@angular/material/toolbar/toolbar';
import * as import11 from '@angular/material/button/button';
import * as import12 from '@angular/material/icon/icon';
import * as import13 from '../../node_modules/@angular/material/toolbar/toolbar.ngfactory';
import * as import14 from '@angular/core/src/linker/element_ref';
import * as import15 from '../../node_modules/@angular/material/button/button.ngfactory';
import * as import16 from '../../node_modules/@angular/material/icon/icon.ngfactory';
import * as import17 from '@angular/material/icon/icon-registry';
var renderType_ToolbarComponent_Host:import0.RenderComponentType = (null as any);
class _View_ToolbarComponent_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _ToolbarComponent_0_4:import3.ToolbarComponent;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_ToolbarComponent_Host0,renderType_ToolbarComponent_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('bc-toolbar',rootSelector,(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_ToolbarComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._ToolbarComponent_0_4 = new import3.ToolbarComponent();
    this._appEl_0.initComponent(this._ToolbarComponent_0_4,([] as any[]),compView_0);
    compView_0.create(this._ToolbarComponent_0_4,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.ToolbarComponent) && (0 === requestNodeIndex))) { return this._ToolbarComponent_0_4; }
    return notFoundResult;
  }
}
function viewFactory_ToolbarComponent_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_ToolbarComponent_Host === (null as any))) { (renderType_ToolbarComponent_Host = viewUtils.createRenderComponentType('',0,import8.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_ToolbarComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const ToolbarComponentNgFactory:import9.ComponentFactory<import3.ToolbarComponent> = new import9.ComponentFactory<import3.ToolbarComponent>('bc-toolbar',viewFactory_ToolbarComponent_Host0,import3.ToolbarComponent);
const styles_ToolbarComponent:any[] = ([] as any[]);
var renderType_ToolbarComponent:import0.RenderComponentType = (null as any);
class _View_ToolbarComponent0 extends import1.AppView<import3.ToolbarComponent> {
  _text_0:any;
  _el_1:any;
  /*private*/ _appEl_1:import2.AppElement;
  _MdToolbar_1_4:import10.MdToolbar;
  _text_2:any;
  _el_3:any;
  /*private*/ _appEl_3:import2.AppElement;
  _MdButton_3_4:import11.MdButton;
  _text_4:any;
  _el_5:any;
  /*private*/ _appEl_5:import2.AppElement;
  _MdIcon_5_4:import12.MdIcon;
  _text_6:any;
  _text_7:any;
  _text_8:any;
  _text_9:any;
  _text_10:any;
  /*private*/ _expr_0:any;
  /*private*/ _expr_5:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_ToolbarComponent0,renderType_ToolbarComponent,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = this.renderer.createElement(parentRenderNode,'md-toolbar',(null as any));
    this.renderer.setElementAttribute(this._el_1,'color','primary');
    this._appEl_1 = new import2.AppElement(1,(null as any),this,this._el_1);
    var compView_1:any = import13.viewFactory_MdToolbar0(this.viewUtils,this.injector(1),this._appEl_1);
    this._MdToolbar_1_4 = new import10.MdToolbar(new import14.ElementRef(this._el_1),this.renderer);
    this._appEl_1.initComponent(this._MdToolbar_1_4,([] as any[]),compView_1);
    this._text_2 = this.renderer.createText((null as any),'\n      ',(null as any));
    this._el_3 = this.renderer.createElement((null as any),'button',(null as any));
    this.renderer.setElementAttribute(this._el_3,'md-icon-button','');
    this._appEl_3 = new import2.AppElement(3,1,this,this._el_3);
    var compView_3:any = import15.viewFactory_MdButton0(this.viewUtils,this.injector(3),this._appEl_3);
    this._MdButton_3_4 = new import11.MdButton(new import14.ElementRef(this._el_3),this.renderer);
    this._appEl_3.initComponent(this._MdButton_3_4,([] as any[]),compView_3);
    this._text_4 = this.renderer.createText((null as any),'\n        ',(null as any));
    this._el_5 = this.renderer.createElement((null as any),'md-icon',(null as any));
    this.renderer.setElementAttribute(this._el_5,'role','img');
    this._appEl_5 = new import2.AppElement(5,3,this,this._el_5);
    var compView_5:any = import16.viewFactory_MdIcon0(this.viewUtils,this.injector(5),this._appEl_5);
    this._MdIcon_5_4 = new import12.MdIcon(new import14.ElementRef(this._el_5),this.renderer,this.parentInjector.get(import17.MdIconRegistry));
    this._appEl_5.initComponent(this._MdIcon_5_4,([] as any[]),compView_5);
    this._text_6 = this.renderer.createText((null as any),'menu',(null as any));
    compView_5.create(this._MdIcon_5_4,[([] as any[]).concat([this._text_6])],(null as any));
    this._text_7 = this.renderer.createText((null as any),'\n      ',(null as any));
      compView_3.create(this._MdButton_3_4,[([] as any[]).concat([
        this._text_4,
        this._el_5,
        this._text_7
      ]
    )],(null as any));
    this._text_8 = this.renderer.createText((null as any),'\n      ',(null as any));
    this._text_9 = this.renderer.createText((null as any),'\n    ',(null as any));
    compView_1.create(this._MdToolbar_1_4,[
      ([] as any[]).concat([
        this._text_2,
        this._el_3,
        this._text_8
      ]
      ).concat(this.projectableNodes[0]).concat([this._text_9]),
      ([] as any[])
    ]
    ,(null as any));
    this._text_10 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    this._expr_0 = import7.UNINITIALIZED;
    var disposable_0:Function = this.renderer.listen(this._el_3,'click',this.eventHandler(this._handle_click_3_0.bind(this)));
    var disposable_1:Function = this.renderer.listen(this._el_3,'mousedown',this.eventHandler(this._handle_mousedown_3_1.bind(this)));
    var disposable_2:Function = this.renderer.listen(this._el_3,'focus',this.eventHandler(this._handle_focus_3_2.bind(this)));
    var disposable_3:Function = this.renderer.listen(this._el_3,'blur',this.eventHandler(this._handle_blur_3_3.bind(this)));
    this._expr_5 = import7.UNINITIALIZED;
    this.init(([] as any[]),[
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._el_5,
      this._text_6,
      this._text_7,
      this._text_8,
      this._text_9,
      this._text_10
    ]
    ,[
      disposable_0,
      disposable_1,
      disposable_2,
      disposable_3
    ]
    ,([] as any[]));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import12.MdIcon) && ((5 <= requestNodeIndex) && (requestNodeIndex <= 6)))) { return this._MdIcon_5_4; }
    if (((token === import11.MdButton) && ((3 <= requestNodeIndex) && (requestNodeIndex <= 7)))) { return this._MdButton_3_4; }
    if (((token === import10.MdToolbar) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 9)))) { return this._MdToolbar_1_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    var changed:boolean = true;
    changed = false;
    const currVal_0:any = 'primary';
    if (import4.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this._MdToolbar_1_4.color = currVal_0;
      changed = true;
      this._expr_0 = currVal_0;
    }
    if (changed) { this._appEl_1.componentView.markAsCheckOnce(); }
    if (((this.numberOfChecks === 0) && !throwOnChange)) { this._MdIcon_5_4.ngOnInit(); }
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_5:any = this._MdButton_3_4._isKeyboardFocused;
    if (import4.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this.renderer.setElementClass(this._el_3,'md-button-focus',currVal_5);
      this._expr_5 = currVal_5;
    }
    this.detectViewChildrenChanges(throwOnChange);
    if (!throwOnChange) { this._MdIcon_5_4.ngAfterViewChecked(); }
  }
  private _handle_click_3_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.openMenu.emit()) !== false);
    return (true && pd_0);
  }
  private _handle_mousedown_3_1($event:any):boolean {
    this._appEl_3.componentView.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._MdButton_3_4._setMousedown()) !== false);
    return (true && pd_0);
  }
  private _handle_focus_3_2($event:any):boolean {
    this._appEl_3.componentView.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._MdButton_3_4._setKeyboardFocus()) !== false);
    return (true && pd_0);
  }
  private _handle_blur_3_3($event:any):boolean {
    this._appEl_3.componentView.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._MdButton_3_4._removeKeyboardFocus()) !== false);
    return (true && pd_0);
  }
}
export function viewFactory_ToolbarComponent0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<import3.ToolbarComponent> {
  if ((renderType_ToolbarComponent === (null as any))) { (renderType_ToolbarComponent = viewUtils.createRenderComponentType('',1,import8.ViewEncapsulation.None,styles_ToolbarComponent,{})); }
  return new _View_ToolbarComponent0(viewUtils,parentInjector,declarationEl);
}